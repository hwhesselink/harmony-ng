substitutions:
  name: esphome-web-bda758
  friendly_name: Kincony bda758

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

globals:
  - id: vol_proto
    type: int
  - id: vol_address
    type: int
  - id: vol_up_int
    type: int
  - id: vol_down_int
    type: int
  - id: vol_up_str
    type: std::string
  - id: vol_down_str
    type: std::string
  - id: vol_len
    type: int
  - id: vol_repeats
    type: int
  - id: vol_repeat_wait
    type: int

# Enable Home Assistant API
api:
  actions:
    - action: set_volume_control
      variables:
        proto: int
        address: int
        up_int: int
        down_int: int
        up_str: string
        down_str: string
        len: int
        repeats: int
        repeat_wait: int
      then:
        - globals.set:
            id: vol_proto
            value: !lambda "return proto;"
        - globals.set:
            id: vol_address
            value: !lambda "return address;"
        - globals.set:
            id: vol_up_int
            value: !lambda "return up_int;"
        - globals.set:
            id: vol_down_int
            value: !lambda "return down_int;"
        - globals.set:
            id: vol_up_str
            value: !lambda "return up_str;"
        - globals.set:
            id: vol_down_str
            value: !lambda "return down_str;"
        - globals.set:
            id: vol_len
            value: !lambda "return len;"
        - globals.set:
            id: vol_repeats
            value: !lambda "return repeats;"
        - globals.set:
            id: vol_repeat_wait
            value: !lambda "return repeat_wait;"
    - action: pana_vup
      then:
        - remote_transmitter.transmit_panasonic:
            address: 0x2A4C
            command: 0x0280E86A
        - delay: !lambda "return 1;"
        - remote_transmitter.transmit_panasonic:
            address: 0x2A4C
            command: 0x0280E86A
    - action: pana_pwr
      then:
        - remote_transmitter.transmit_panasonic:
            address: 0x4004
            command: 0x0d00bcb1
    - action: tx_panasonic
      variables:
        address: int
        command: int
      then:
        - remote_transmitter.transmit_panasonic:
            address: !lambda 'return address;'
            command: !lambda 'return command;'
    - action: tx_panasonic_x2
      variables:
        address: int
        command: int
      then:
        - remote_transmitter.transmit_panasonic:
            address: !lambda 'return address;'
            command: !lambda 'return command;'
        - delay: !lambda "return 1;"
        - remote_transmitter.transmit_panasonic:
            address: !lambda 'return address;'
            command: !lambda 'return command;'
    - action: tx_pronto
      variables:
        data: string
      then:
        - remote_transmitter.transmit_pronto:
            data: !lambda 'return data;'
    - action: tx_pronto_up
      then:
        - remote_transmitter.transmit_pronto:
            data: '0000 0048 0000 0018 00C0 00C0 0030 0090 0030 0090 0030 0030 0030 0090 0030 0090 0030 0030 0030 0090 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0090 0030 0030 0030 0030 0030 0090 0030 0030 0030 0090 0030 0090 0030 0090 0030 0090 0030 09E6'
    - action: tx_pioneer
      variables:
        rc_code_1: int
        repeat: int
      then:
        - remote_transmitter.transmit_pioneer:
            rc_code_1: !lambda 'return rc_code_1;'
            repeat:
              times: !lambda 'return repeat;'
    - action: tx_pioneer2
      variables:
        rc_code_1: int
        rc_code_2: int
        repeat: int
      then:
        - remote_transmitter.transmit_pioneer:
            rc_code_1: !lambda 'return rc_code_1;'
            rc_code_2: !lambda 'return rc_code_2;'
            repeat:
              times: !lambda 'return repeat;'
    - action: tx_sony
      variables:
        data: int
        nbits: int
        wait: int
      then:
        - repeat:
            count: 3
            then:
              - remote_transmitter.transmit_sony:
                  data: !lambda 'return data;'
                  nbits: !lambda 'return nbits;'
              - delay: !lambda "return wait;"
    - action: tx_lg
      variables:
        data: int
        nbits: int
        repeat: int
        wait: int
      then:
        - repeat:
            count: !lambda 'return repeat;'
            then:
              - remote_transmitter.transmit_lg:
                  data: !lambda 'return data;'
                  nbits: !lambda 'return nbits;'
              - delay: !lambda "return wait;"
    - action: tx_nec2
      variables:
        address: int
        command: int
        cmdreps: int
        repeat: int
        wait: int
      then:
        - repeat:
            count: !lambda 'return repeat;'
            then:
              - remote_transmitter.transmit_nec:
                  address: !lambda 'return address;'
                  command: !lambda 'return command;'
                  command_repeats: !lambda 'return cmdreps;'
              - delay: !lambda "return wait;"
    - action: tx_nec
      variables:
        address: int
        command: int
      then:
         - remote_transmitter.transmit_nec:
              address: !lambda 'return address;'
              command: !lambda 'return command;'
    - action: tx_necrep
      variables:
        command: int
        wait: int
      then:
          - remote_transmitter.transmit_nec:
              address: 0xBF40
              command: !lambda 'return command;'
          - delay: !lambda "return wait;"


# Allow Over-The-Air updates
ota:
- platform: esphome

#improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  use_address: 10.12.3.168
#  use_address: 10.12.2.42
#  ssid: !secret wifi_ssid_cfb
#  password: !secret wifi_password_cfb
#  use_address: 10.12.1.30
#  ssid: !secret wifi_ssid_lpb
#  password: !secret wifi_password_lpb
#  manual_ip:
#    static_ip: 10.12.1.30
#    gateway: 10.12.1.1
#    subnet: 255.255.255.0
  # Set up a wifi access point
  ap: {}

#captive_portal:

#dashboard_import:
#  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
#  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
#esp32_improv:
#  authorizer: none

# To have a "next url" for improv serial
web_server:

#debug:

#text_sensor:
#  - platform: debug
#    device:
#      name: "Device Info"
#    reset_reason:
#      name: "Reset Reason"

remote_transmitter:
  - id: transmitter_ir
    pin: GPIO2
    carrier_duty_percent: 50%

sensor:
  - platform: wifi_signal
    name: "${friendly_name} Wifi Signal Strength"
    update_interval: 60s
  - platform: uptime
    name: "${friendly_name} Uptime"

binary_sensor:
  - platform: remote_receiver
    receiver_id: receiver_rf
    internal: true
    name: "RC6 Vol+"
    rc6:
      address: 1
      command: 0x10
    on_press:
      - button.press: volume_up
  - platform: remote_receiver
    receiver_id: receiver_rf
    internal: true
    name: "RC6 Vol-"
    rc6:
      address: 1
      command: 0x11
    on_press:
      - button.press: volume_down

button:
  # Restart the ESP
  - platform: restart
    name: "${friendly_name} reboot"
  - platform: template
    name: "Volume UP"
    id: volume_up
    on_press:
      - repeat:
          count: !lambda "return id(vol_repeats);"
          then:
            - if:
                condition:
                  lambda: 'return (id(vol_proto) == 1);'
                then:
                  - remote_transmitter.transmit_pronto:
                      data: !lambda "return id(vol_up_str);"
            - if:
                condition:
                  lambda: 'return (id(vol_proto) == 3);'
                then:
                  - remote_transmitter.transmit_nec:
                      address: !lambda "return id(vol_address);"
                      command: !lambda "return id(vol_up_int);"
            - if:
                condition:
                  lambda: 'return (id(vol_proto) == 4);'
                then:
                  - remote_transmitter.transmit_panasonic:
                      address: !lambda "return id(vol_address);"
                      command: !lambda "return id(vol_up_int);"
            - if:
                condition:
                  lambda: 'return (id(vol_proto) == 5);'
                then:
                  - remote_transmitter.transmit_pioneer:
                      rc_code_1: !lambda "return id(vol_up_int);"
            - delay: !lambda "return id(vol_repeat_wait);"
  - platform: template
    name: "Volume DOWN"
    id: volume_down
    on_press:
      - repeat:
          count: !lambda "return id(vol_repeats);"
          then:
            - if:
                condition:
                  lambda: 'return (id(vol_proto) == 1);'
                then:
                  - remote_transmitter.transmit_pronto:
                      data: !lambda "return id(vol_down_str);"
            - if:
                condition:
                  lambda: 'return (id(vol_proto) == 3);'
                then:
                  - remote_transmitter.transmit_nec:
                      address: !lambda "return id(vol_address);"
                      command: !lambda "return id(vol_down_int);"
            - if:
                condition:
                  lambda: 'return (id(vol_proto) == 4);'
                then:
                  - remote_transmitter.transmit_panasonic:
                      address: !lambda "return id(vol_address);"
                      command: !lambda "return id(vol_down_int);"
            - if:
                condition:
                  lambda: 'return (id(vol_proto) == 5);'
                then:
                  - remote_transmitter.transmit_pioneer:
                      rc_code_1: !lambda "return id(vol_down_int);"
            - delay: !lambda "return id(vol_repeat_wait);"

packages:
#  remote_rcvr_ir: !include common/remote_rcvr_ir.yaml
  remote_rcvr_rf: !include common/remote_rcvr_rf.yaml
